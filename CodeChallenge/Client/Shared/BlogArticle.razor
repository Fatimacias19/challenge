@using CodeChallenge.Shared
@using Microsoft.Extensions.Configuration;

@inject HttpClient Http
@inject IJSRuntime js

<div class="text-center">
    <div class="latest-articles-list content-wrapper" id="maincontent" tabindex="-1">
        @if (Type == "External")
        {
            <div class="m-20">
                <div class="form-group">
                    <section class="main">
                        <span><i class="bi bi-search"></i></span>
                        <input @bind="@Filter" class="form-control input" />
                        <button type="button" @onclick="RefreshList" class="btn btn-secondary">
                            <svg width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"></path>
                            </svg>
                        </button>
                    </section>
                </div>
            </div>
        }
        <div class="articles-grid">
            @if (Articles == null)
            {
                <a href="Article/Create">Add Article</a>
            }
            else
            {
                @foreach (var article in Articles)
                {
                    var url = @article.Url;
                    if (Type == "Local")
                    {
                        url = "/Article/Show/" + article.Id;
                    }
                    <a href="@url">
                        <div class="article">
                            <div class="article__hero">
                                @if (Type == "Local")
                                {
                                    <div class="article__hero-image imgix-fluid imgix-bg" data-src="@article.Image" style="background-image: url('data:image/png;base64,@article.Image');"></div>
                                }
                                else
                                {
                                    <div class="article__hero-image imgix-fluid imgix-bg" data-src="@article.Image" style="background-image: url(@article.Image);"></div>

                                }
                            </div>
                            <div class="article__info">
                                <h3 class="article__title">
                                    <span>@article.Title</span> @article.Description
                                </h3>
                                <div class="article__dek">
                                    <p>@article.Content</p>
                                </div>
                                <div>
                                    <div class="article__meta">
                                        <span class="by">By</span> @article.Source.Name @article.PublishedAt
                                    </div>
                                </div>
                            </div>
                        </div>
                    </a>

                }
                <div id="container"></div>
            }
        </div>
    </div>
    <div id="progress" style="display:none">
        <h4>Loading...</h4>
    </div>
</div>

@code    {
    [Parameter]
    public string Type { get; set; }
    [Parameter]
    public string Filter { get; set; }

    IEnumerable<Article> Articles;
    protected override async Task OnInitializedAsync()
    {
        Filter = "watches";
        await RefreshList();
    }

    private async Task RefreshList()
    {
        Blog blog;
        if (Type == "Local")
        {
            blog = await js.InvokeAsync<Blog>("fnGetLocal");
        }
        else
        {
            string url = $"https://gnews.io/api/v4/search?token=ac42615a4c43a37d65d9c37c6e14f763&q={Filter}";
            blog = await Http.GetFromJsonAsync<Blog>(url);

        }
        if (blog != null)
            Articles = blog.Articles;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Type == "External")
        {
            await js.InvokeVoidAsync("renderInfiniteScrolling", Type, Filter);
        }
        await base.OnAfterRenderAsync(firstRender);
    }


}
